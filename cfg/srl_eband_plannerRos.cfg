#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("yaw_goal_tolerance_dyn",    double_t,    0, "yaw_goal_tolerance", 0.2,  0, 1)
gen.add("xy_goal_tolerance_dyn", double_t, 0, "xy_goal_tolerancer",   0.35, 0.0,   1)
gen.add("rot_stopped_vel_dyn",    double_t,    0, "Min rot velocity",   0.01, 0.0,   1.3)
gen.add("trans_stopped_vel_dyn",   double_t,   0, "Min Trans velocity",   0.01, 0.0,   1.3)
# eband related
gen.add("eband_min_relative_bubble_overlap_dyn", double_t, 0, "eband_min_relative_bubble_overlap", 0.7, 0.0, 10.0)
gen.add("eband_tiny_bubble_distance_dyn", double_t, 0, "eband_tiny_bubble_distance", 0.01, 0.0, 100.0)
gen.add("eband_tiny_bubble_expansion_dyn", double_t, 0, "eband_tiny_bubble_expansion", 0.01, 0.0, 100.0)
gen.add("eband_internal_force_gain_dyn", double_t, 0, "eband_internal_force_gain", 1.5, 0.0, 100.0)
gen.add("eband_external_force_gain_dyn", double_t, 0, "eband_external_force_gain", 0.65, 0.0, 100.0)
gen.add("num_iterations_eband_optimization_dyn", int_t, 0, "num_iterations_eband_optimization", 6, 1, 100)
gen.add("eband_equilibrium_approx_max_recursion_depth_dyn", double_t, 0, "eband_equilibrium_approx_max_recursion_depth", 4, 1.0, 100.0)
gen.add("eband_equilibrium_relative_overshoot_dyn", double_t, 0, "eband_equilibrium_relative_overshoot", 0.75, 0.1, 100.0)
gen.add("eband_significant_force_lower_bound_dyn", double_t, 0, "eband_significant_force_lower_bound", 0.15, 0.1, 100.0)
# accelerations
gen.add("max_translational_acceleration_dyn", double_t, 0, "max_translational_acceleration", 0.125, 0.0, 100.0)
gen.add("max_rotational_acceleration_dyn", double_t, 0, "max_rotational_acceleration", 0.9, 0.0, 100.0)
gen.add("max_rotational_velocity_turning_on_spot_dyn", double_t, 0, "max_rotational_velocity turning on the post", 0.250, 0.0, 3.140)
gen.add("max_acceleration_dyn", double_t, 0, "max_acceleration", 0.1, 0.0, 100.0)
gen.add("limit_acc_dyn", bool_t, 0, "Limit the variation of the velocity (reads as input max_translational_acceleration_dyn)", True)
# velocities
gen.add("max_vel_lin_dyn", double_t, 0, "max_vel_lin", 1.3, 0.0, 100.0)
gen.add("min_vel_lin_dyn", double_t, 0, "min_vel_lin", 0.05, 0, 100.0)
gen.add("max_vel_th_dyn", double_t, 0, "max_vel_th", 1.57, 0.0, 100.0)
gen.add("min_vel_th_dyn", double_t, 0, "max_in_place_vel_th", 0.0, 0.0, 100.0)
gen.add("min_in_place_vel_th_dyn", double_t, 0, "min_in_place_vel_th", 0.15, 0.0, 100.0)
gen.add("in_place_trans_vel_dyn", double_t, 0, "in_place_trans_vel", 0.0, 0.0, 100.0)
gen.add("rot_stopping_turn_on_the_spot_dyn", double_t, 0, "To which yaw value to stop the turning on the spot", 0.02, 0, 1.54)
gen.add("trans_vel_goal_dyn", double_t, 0, "translational vel while approaching",0.5, 0.1, 1.3)
gen.add("start_to_stop_goal_dyn", double_t, 0, "Start distance to stop the robot", 1.5, 1.0, 5.0)
# controller gains
gen.add("number_tentative_setting_band_dyn", int_t, 0, "Number of attemps to fix the band", 2, 0, 50)
gen.add("k_prop_dyn", double_t, 0, "k_prop", 1.5, 0.0, 100.0)
gen.add("k_damp_dyn", double_t, 0, "k_damp", 3.0, 0.0, 100.0)
gen.add("Ts_dyn", double_t, 0, "Ts", 0.1, 0.0, 100.0)
gen.add("Kv_one_dyn", double_t, 0, "Kv_one", 0.9, 0.0, 100.0)
gen.add("Kv_two_dyn", double_t, 0, "Kv_two", 0.9, 0.0, 100.0)
gen.add("Vel_gain_dyn", double_t, 0, "Vel_gain", 2.745, 0.0, 100.0)
gen.add("B_dyn", double_t, 0, "B", 0.7, 0.010, 100.0)
gen.add("smoothed_eband_dyn", bool_t, 0, "smoothed_eband", False)
gen.add("tracker_on", bool_t, 0, "tracker_on", False)
gen.add("backward_motion_on_dyn", bool_t,0,"backward_motion_on", True)
# define Velocities' limitis based on curvature and laser points density

gen.add("limit_vel_based_laser_points_density_dyn", bool_t, 0, "Check if to limit the translational velocity based on laser points density", True)
gen.add("warning_robot_radius_dyn", double_t, 0, "Radius in which check how many point are close to the robot", 0.450, 0.1, 30.0)
gen.add("max_path_length_to_check_points", double_t, 0, "Maximum path length into which to check if a laser point is into the path", 3.20, 0.0, 20.0)
gen.add("warning_robot_angle_dyn", double_t, 0, "warning_robot_angle_", 0.9, 0.1, 10)
gen.add("max_translational_vel_due_to_laser_points_density_dyn", double_t, 0, "max_translational_vel_due_to_laser_points_density_dyn", 0.65, 0.1, 10)
gen.add("limit_vel_based_on_curvature", bool_t, 0, "Limiting Velocities based on curvature", False)
gen.add("curvature_guarding_thrs", double_t, 0, "Max Value of Curvature above which the planner starts to decrase velocity", 0.75, 0.0, 100.0)
gen.add("min_vel_limited_curvature", double_t, 0, "Max Value of Curvature above which the planner starts to decrase velocity", 0.75, 0.0, 100.0)
gen.add("limit_vel_based_collision_warnings", bool_t, 0, "Limiting Velocities based on collision warnings", True)
gen.add("max_vel_collision_warning", double_t, 0, "Max Value of the velocity if collision warnings are on", 0.65, 0.0, 1.3)
# context-cost function
gen.add("human_legibility_on_dyn", bool_t, 0, "Include velocity limitations based on human_legibility", False)
gen.add("cc_d_low", double_t, 0, "minimum distance between human and robot for comaptibility calculations", 0.7, 0.0, 100.0)
gen.add("cc_d_high", double_t, 0, "maximum distance between human and robot for comaptibility calculations", 10.0, 0.0, 100.0)
gen.add("cc_alpha_max", double_t, 0, "maximum angle difference between human and robot for comaptibility calculations", 2.09, 0.0, 3.14)
gen.add("cc_beta", double_t, 0, "angle from robot front to discard human for collision in comaptibility calculations", 1.57, 0.0, 3.14)
gen.add("cc_min_scale", double_t, 0, "minimum scaling of velocities that is always allowed regardless if humans are too near", 0.5, 0.0, 1.0)
gen.add("publish_predictions", bool_t, 0, "whether to publish visualization for human position prediction", False)
gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("publish_curr_traj", bool_t, 0, "whether to publish visualization for predicted robot local path", False)
# Human Robot Interaction Message
gen.add("min_alert_dist_tracks_dyn", double_t, 0, "min_alert_dist_tracks_dyn", 0.75, 0.0, 10)
gen.add("max_ang_range_tracks_dyn", double_t, 0, "max_ang_range_tracks_dyn", 0.67, 0.0, 6.28)
gen.add("check_costmap_layers_dyn", bool_t,0,"check_costmap_layers", True)
gen.add("hr_message",    str_t,    0, "The message used during the Human Robot Interaction phase",  "Excuse me")
gen.add("limit_vel_based_on_hri", bool_t, 0, "Limiting Velocities based on HRI", False)
gen.add("max_lin_vel_hri", double_t, 0, "min_alert_dist_tracks_dyn", 0.3, 0.10, 1.30)
gen.add("waiting_time_hri_message", double_t, 0, "min_alert_dist_tracks_dyn", 5.0, 0.10, 50.30)
exit(gen.generate("srl_eband_local_planner", "srl_eband_local_planner", "srlEBandLocalPlanner"))
